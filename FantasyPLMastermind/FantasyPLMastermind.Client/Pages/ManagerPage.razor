@page "/manager/{teamId:int}"
@rendermode InteractiveWebAssembly
@inject HttpClient Http

<Styles> </Styles>
@code {
    Manager teamData = new();
    List<Player> playerData = new();
    int defCount { get; set; }
    int midCount { get; set; }
    int fwdCount { get; set; }
    

    [Parameter]
    public int teamId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string baseUrl = "https://localhost:7214/";
        try
        {
            teamData = await Http.GetFromJsonAsync<Manager>($"{baseUrl}api/manager/{teamId}");
            playerData = await Http.GetFromJsonAsync<List<Player>>($"{baseUrl}api/player/{teamId}");

            defCount = playerData.Take(11).Count(p => p.position == Position.Defender);
            midCount = playerData.Take(11).Count(p => p.position == Position.Midfielder);
            fwdCount = playerData.Take(11).Count(p => p.position == Position.Forward);         

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}

<div class="container">
    <h3>Squad: @teamData.teamName</h3> <h3> TeamID: @teamId</h3>
    <div class="manager-info">
        <p>TeamID = @teamId</p>
        <p>Current Gameweek Points: @teamData.gameweekPoints</p>
        <p>Rank in League: @teamData.rank</p>
        <p>Total Points: @teamData.totalPoints</p>
        <p>Bank: @teamData.bank</p>
        <p>Value: @teamData.value</p>
        <p>Event Transfers: @teamData.event_transfers</p>
        <p>Event Transfers Cost: @teamData.event_transfers_cost</p>
        <p>Points on Bench: @teamData.points_on_bench</p>
        <p>Formation: @defCount-@midCount-@fwdCount</p>
        <a href="@teamId/transfers"> Check Transfer History</a>

    </div>
    
</div>

<div class="formation">
    
    <div class="line">
        @foreach (var player in playerData.Take(11).Where(p => p.position == Position.Goalkeeper))
        {            
            <div class="player-card">
                <div class="player-info">
                    <div class="player-text">@player.web_name (@player.event_points) <img src="~/TeamJersey/@player.teamName"> </div>
                </div>
            </div>
        }
    </div>

    
    <div class="line">
        @foreach (var player in playerData.Take(11).Where(p => p.position == Position.Defender))
        {
            <div class="player-card">
                <div class="player-image">
                    <img src="TeamJersey/@(player.teamName).png" alt="@player.teamName Jersey">
                </div>
                <div class="player-info">
                    <div class="player-text">@player.web_name (@player.event_points)</div>
                </div>
            </div>
        }
    </div>

    
    <div class="line">
        @foreach (var player in playerData.Take(11).Where(p => p.position == Position.Midfielder))
        {           
            <div class="player-card">
                <div class="player-image">
                    <img src="TeamJersey/@(player.teamName).png" alt="@player.teamName Jersey">
                </div>
                <div class="player-info">
                    <div class="player-text">@player.web_name (@player.event_points)</div>
                </div>
            </div>
        }
    </div>

   
    <div class="line">
        @foreach (var player in playerData.Take(11).Where(p => p.position == Position.Forward))
        {
            <div class="player-card">
                <div class="player-image">
                    <img src="TeamJersey/@(player.teamName).png" alt="@player.teamName Jersey">
                </div>
                <div class="player-info">
                    <div class="player-text">@player.web_name (@player.event_points)</div>
                </div>
            </div>
        }
    </div>

    <div class="line">
        @foreach (var player in playerData.Skip(11).Take(4))
        {
            <div class="player-card">
                <div class="player-info">
                    <div class="player-text">@player.web_name (@player.event_points)</div>
                </div>
            </div>
        }
    </div>
</div>



<table class="player-table">
    <thead>
        <tr>
            <th>Player</th>
            <th>Points</th>
            <th>Price</th>
            <th>Team</th>
            <th>Position</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var player in playerData.OrderBy(x => x.position))
        {
            <tr> 
                <td>@player.web_name</td>
                <td>@player.event_points</td>
                <td>@player.now_cost</td>
                <td>@player.teamName</td>
                <td>@player.position</td>
            </tr>
        }
    </tbody>
</table>


